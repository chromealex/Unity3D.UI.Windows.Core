		
		/// <summary>
		/// Flows to the {CLASS_NAME}.
		/// Use this method to play transition effect on B window only.
		/// If you call Hide() on A window - it will hide with standard behaviour.
		/// Full Name: {CLASS_NAME_WITH_NAMESPACE}
		/// </summary>
		{PARAMETERS_DESCRIPTION}
		/// <returns>{CLASS_NAME}</returns>
		public virtual {CLASS_NAME_WITH_NAMESPACE} Flow{CLASS_NAME}({PARAMETERS_DEFINITION}) {
			
			return this.INTERNAL_Flow{CLASS_NAME}(false, false, false, (w) => w.OnParametersPass({PARAMETERS_CALL}));
			
		}
		
		/// <summary>
		/// Flows to the {CLASS_NAME}.
		/// Use this method to play transition effect on B window only.
		/// If you call Hide() on A window - it will hide with standard behaviour.
		/// Full Name: {CLASS_NAME_WITH_NAMESPACE}
		/// </summary>
		{PARAMETERS_DESCRIPTION}
		/// <param name="onInstance">Calls after window created, but before any method called</param>
		/// <returns>{CLASS_NAME}</returns>
		public virtual {CLASS_NAME_WITH_NAMESPACE} Flow{CLASS_NAME}(System.Action<{CLASS_NAME_WITH_NAMESPACE}> onInstance{PARAMETERS_DEFINITION_WITH_INSTANCE}) {
			
			return this.INTERNAL_Flow{CLASS_NAME}(false, false, false, (w) => w.OnParametersPass({PARAMETERS_CALL}), onInstance);
			
		}

		/// <summary>
		/// Flows to the {CLASS_NAME}.
		/// Hides current window.
		/// Use this method to play transition effect on both windows (A and B).
		/// Full Name: {CLASS_NAME_WITH_NAMESPACE}
		/// </summary>
		{PARAMETERS_DESCRIPTION}
		/// <returns>{CLASS_NAME}</returns>
		public virtual {CLASS_NAME_WITH_NAMESPACE} FlowHide{CLASS_NAME}({PARAMETERS_DEFINITION}) {
			
			return this.INTERNAL_Flow{CLASS_NAME}(true, false, false, (w) => w.OnParametersPass({PARAMETERS_CALL}));
			
		}

		/// <summary>
		/// Flows to the {CLASS_NAME}.
		/// Hides current window.
		/// Use this method to play transition effect on both windows (A and B).
		/// Full Name: {CLASS_NAME_WITH_NAMESPACE}
		/// </summary>
		{PARAMETERS_DESCRIPTION}
		/// <param name="onInstance">Calls after window created, but before any method called</param>
		/// <returns>{CLASS_NAME}</returns>
		public virtual {CLASS_NAME_WITH_NAMESPACE} FlowHide{CLASS_NAME}(System.Action<{CLASS_NAME_WITH_NAMESPACE}> onInstance{PARAMETERS_DEFINITION_WITH_INSTANCE}) {
			
			return this.INTERNAL_Flow{CLASS_NAME}(true, false, false, (w) => w.OnParametersPass({PARAMETERS_CALL}), onInstance);
			
		}

		/// <summary>
		/// Flows to the {CLASS_NAME}.
		/// Hides current window and wait while it hidden, then flow.
		/// Use this method to play transition effect on both windows (A and B).
		/// Full Name: {CLASS_NAME_WITH_NAMESPACE}
		/// </summary>
		{PARAMETERS_DESCRIPTION}
		/// <returns>{CLASS_NAME}</returns>
		public virtual {CLASS_NAME_WITH_NAMESPACE} FlowWaitHide{CLASS_NAME}({PARAMETERS_DEFINITION}) {
			
			return this.INTERNAL_Flow{CLASS_NAME}(true, true, false, (w) => w.OnParametersPass({PARAMETERS_CALL}));
			
		}

		/// <summary>
		/// Flows to the {CLASS_NAME}.
		/// Hides current window and wait while it hidden, then flow.
		/// Use this method to play transition effect on both windows (A and B).
		/// Full Name: {CLASS_NAME_WITH_NAMESPACE}
		/// </summary>
		{PARAMETERS_DESCRIPTION}
		/// <param name="onInstance">Calls after window created, but before any method called</param>
		/// <returns>{CLASS_NAME}</returns>
		public virtual {CLASS_NAME_WITH_NAMESPACE} FlowWaitHide{CLASS_NAME}(System.Action<{CLASS_NAME_WITH_NAMESPACE}> onInstance{PARAMETERS_DEFINITION_WITH_INSTANCE}) {
			
			return this.INTERNAL_Flow{CLASS_NAME}(true, true, false, (w) => w.OnParametersPass({PARAMETERS_CALL}), onInstance);
			
		}

		/// <summary>
		/// Flows to the {CLASS_NAME}. Async method.
		/// Use this method to play transition effect on B window only.
		/// If you call Hide() on A window - it will hide with standard behaviour.
		/// Full Name: {CLASS_NAME_WITH_NAMESPACE}
		/// </summary>
		{PARAMETERS_DESCRIPTION}
		/// <returns>{CLASS_NAME}</returns>
		public virtual {CLASS_NAME_WITH_NAMESPACE} FlowAsync{CLASS_NAME}({PARAMETERS_DEFINITION}) {
			
			return this.INTERNAL_Flow{CLASS_NAME}(false, false, true, (w) => w.OnParametersPass({PARAMETERS_CALL}));
			
		}
		
		/// <summary>
		/// Flows to the {CLASS_NAME}. Async method.
		/// Use this method to play transition effect on B window only.
		/// If you call Hide() on A window - it will hide with standard behaviour.
		/// Full Name: {CLASS_NAME_WITH_NAMESPACE}
		/// </summary>
		{PARAMETERS_DESCRIPTION}
		/// <param name="onInstance">Calls after window created, but before any method called</param>
		/// <returns>{CLASS_NAME}</returns>
		public virtual {CLASS_NAME_WITH_NAMESPACE} FlowAsync{CLASS_NAME}(System.Action<{CLASS_NAME_WITH_NAMESPACE}> onInstance{PARAMETERS_DEFINITION_WITH_INSTANCE}) {
			
			return this.INTERNAL_Flow{CLASS_NAME}(false, false, true, (w) => w.OnParametersPass({PARAMETERS_CALL}), onInstance);
			
		}

		/// <summary>
		/// Flows to the {CLASS_NAME}. Async method.
		/// Hides current window.
		/// Use this method to play transition effect on both windows (A and B).
		/// Full Name: {CLASS_NAME_WITH_NAMESPACE}
		/// </summary>
		{PARAMETERS_DESCRIPTION}
		/// <returns>{CLASS_NAME}</returns>
		public virtual {CLASS_NAME_WITH_NAMESPACE} FlowAsyncHide{CLASS_NAME}({PARAMETERS_DEFINITION}) {
			
			return this.INTERNAL_Flow{CLASS_NAME}(true, false, true, (w) => w.OnParametersPass({PARAMETERS_CALL}));
			
		}

		/// <summary>
		/// Flows to the {CLASS_NAME}. Async method.
		/// Hides current window.
		/// Use this method to play transition effect on both windows (A and B).
		/// Full Name: {CLASS_NAME_WITH_NAMESPACE}
		/// </summary>
		{PARAMETERS_DESCRIPTION}
		/// <param name="onInstance">Calls after window created, but before any method called</param>
		/// <returns>{CLASS_NAME}</returns>
		public virtual {CLASS_NAME_WITH_NAMESPACE} FlowAsyncHide{CLASS_NAME}(System.Action<{CLASS_NAME_WITH_NAMESPACE}> onInstance{PARAMETERS_DEFINITION_WITH_INSTANCE}) {
			
			return this.INTERNAL_Flow{CLASS_NAME}(true, false, true, (w) => w.OnParametersPass({PARAMETERS_CALL}), onInstance);
			
		}

		/// <summary>
		/// Flows to the {CLASS_NAME}. Async method.
		/// Hides current window and wait while it hidden, then flow.
		/// Use this method to play transition effect on both windows (A and B).
		/// Full Name: {CLASS_NAME_WITH_NAMESPACE}
		/// </summary>
		{PARAMETERS_DESCRIPTION}
		/// <returns>{CLASS_NAME}</returns>
		public virtual {CLASS_NAME_WITH_NAMESPACE} FlowAsyncWaitHide{CLASS_NAME}({PARAMETERS_DEFINITION}) {
			
			return this.INTERNAL_Flow{CLASS_NAME}(true, true, true, (w) => w.OnParametersPass({PARAMETERS_CALL}));
			
		}

		/// <summary>
		/// Flows to the {CLASS_NAME}. Async method.
		/// Hides current window and wait while it hidden, then flow.
		/// Use this method to play transition effect on both windows (A and B).
		/// Full Name: {CLASS_NAME_WITH_NAMESPACE}
		/// </summary>
		{PARAMETERS_DESCRIPTION}
		/// <param name="onInstance">Calls after window created, but before any method called</param>
		/// <returns>{CLASS_NAME}</returns>
		public virtual {CLASS_NAME_WITH_NAMESPACE} FlowAsyncWaitHide{CLASS_NAME}(System.Action<{CLASS_NAME_WITH_NAMESPACE}> onInstance{PARAMETERS_DEFINITION_WITH_INSTANCE}) {
			
			return this.INTERNAL_Flow{CLASS_NAME}(true, true, true, (w) => w.OnParametersPass({PARAMETERS_CALL}), onInstance);
			
		}
