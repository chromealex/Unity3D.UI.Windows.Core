
		/// <summary>
		/// Flows to the {CLASS_NAME}.
		/// Use this method to play transition effect on B window only.
		/// If you call Hide() on A window - it will hide with standard behaviour.
		/// Full Name: {CLASS_NAME_WITH_NAMESPACE}
		/// </summary>
		/// <returns>{CLASS_NAME}</returns>
		public virtual {CLASS_NAME_WITH_NAMESPACE} Flow{CLASS_NAME}() {
			
			return this.INTERNAL_Flow{CLASS_NAME}(hide: false, hideWait: false, async: false);
			
		}

		/// <summary>
		/// Flows to the {CLASS_NAME}.
		/// Hides current window.
		/// Use this method to play transition effect on both windows (A and B).
		/// Full Name: {CLASS_NAME_WITH_NAMESPACE}
		/// </summary>
		/// <returns>{CLASS_NAME}</returns>
		public virtual {CLASS_NAME_WITH_NAMESPACE} FlowHide{CLASS_NAME}() {
			
			return this.INTERNAL_Flow{CLASS_NAME}(hide: true, hideWait: false, async: false);
			
		}

		/// <summary>
		/// Flows to the {CLASS_NAME}.
		/// Hides current window and wait while it hidden, then flow.
		/// Use this method to play transition effect on both windows (A and B).
		/// Full Name: {CLASS_NAME_WITH_NAMESPACE}
		/// </summary>
		/// <returns>{CLASS_NAME}</returns>
		public virtual {CLASS_NAME_WITH_NAMESPACE} FlowWaitHide{CLASS_NAME}() {
			
			return this.INTERNAL_Flow{CLASS_NAME}(hide: true, hideWait: true, async: false);
			
		}

		/// <summary>
		/// Flows to the {CLASS_NAME}. Async method.
		/// Use this method to play transition effect on B window only.
		/// If you call Hide() on A window - it will hide with standard behaviour.
		/// Full Name: {CLASS_NAME_WITH_NAMESPACE}
		/// </summary>
		/// <returns>{CLASS_NAME}</returns>
		public virtual {CLASS_NAME_WITH_NAMESPACE} FlowAsync{CLASS_NAME}() {
			
			return this.INTERNAL_Flow{CLASS_NAME}(hide: false, hideWait: false, async: true);
			
		}

		/// <summary>
		/// Flows to the {CLASS_NAME}. Async method.
		/// Hides current window.
		/// Use this method to play transition effect on both windows (A and B).
		/// Full Name: {CLASS_NAME_WITH_NAMESPACE}
		/// </summary>
		/// <returns>{CLASS_NAME}</returns>
		public virtual {CLASS_NAME_WITH_NAMESPACE} FlowAsyncHide{CLASS_NAME}() {
			
			return this.INTERNAL_Flow{CLASS_NAME}(hide: true, hideWait: false, async: true);
			
		}

		/// <summary>
		/// Flows to the {CLASS_NAME}. Async method.
		/// Hides current window and wait while it hidden, then flow.
		/// Use this method to play transition effect on both windows (A and B).
		/// Full Name: {CLASS_NAME_WITH_NAMESPACE}
		/// </summary>
		/// <returns>{CLASS_NAME}</returns>
		public virtual {CLASS_NAME_WITH_NAMESPACE} FlowAsyncWaitHide{CLASS_NAME}() {
			
			return this.INTERNAL_Flow{CLASS_NAME}(hide: true, hideWait: true, async: true);
			
		}
		
		private {CLASS_NAME_WITH_NAMESPACE} INTERNAL_Flow{CLASS_NAME}(bool hide, bool hideWait, bool async, System.Action<{CLASS_NAME_WITH_NAMESPACE}> onParametersPassCall = null, System.Action<{CLASS_NAME_WITH_NAMESPACE}> onInstance = null) {
			
			return WindowSystemFlow.DoFlow<{CLASS_NAME_WITH_NAMESPACE}>(this, {FLOW_FROM_ID}, {FLOW_TO_ID}, hide, hideWait, onParametersPassCall, onInstance, async);
			
		}
		